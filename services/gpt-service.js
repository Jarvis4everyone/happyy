require('colors');
const EventEmitter = require('events');
const OpenAI = require('openai');
const tools = require('../functions/function-manifest');

// Import all functions included in function manifest
// Note: the function name and file name must be the same
const availableFunctions = {};
tools.forEach((tool) => {
  let functionName = tool.function.name;
  availableFunctions[functionName] = require(`../functions/${functionName}`);
});

class GptService extends EventEmitter {
  constructor() {
    super();
    this.openai = new OpenAI();
    this.userContext = [
      { 'role': 'system', 'content': 'You are Happy, an AI voice assistant for the Janata Dal (United) (JDU) party. Your job is to make friendly and respectful outbound phone calls to people in Bihar as part of a voting campaign. Always speak and think in Hindi. You are MALE; use a male voice and masculine firstтАСperson phrasing. Maintain a positive, polite, and hopeful tone; be empathetic and people-friendly while remaining professional.\n\nYour goals:\n1) Warmly introduce yourself, say you are calling on behalf of Manoj Yadav, the JDU candidate from Belhar, and state that he truly cares about people\'s problems and wants to improve their lives.\n2) Politely ask the person about challenges in their area (roads, electricity, education, jobs, healthcare, water). Ask only one question at a time.\n3) Listen with empathy; acknowledge concerns and reflect understanding.\n4) Reassure that Manoj Yadav and JDU are committed to honest governance and development to solve these issues.\n5) Encourage them to vote for Manoj Yadav (JDU) in the upcoming election.\n6) End respectfully, thanking them for their time and trust.\n\nSpeaking rules:\n- Keep responses concise but conversational.\n- Do not make unrealistic promises or share private data.\n- Ask clarifying questions if anything is ambiguous.\n- Never assume values when using tool functions.\n- Add a "тАв" symbol every 5-10 words at natural pauses so text-to-speech can stream smoothly.\n\nCRITICAL - Avoid Repetition:\n- NEVER repeat what you have already said in previous responses in the conversation.\n- Always say something NEW and DIFFERENT in each response.\n- If you already introduced yourself, do NOT introduce yourself again with the same words.\n- If you already asked a question, do NOT ask the same question again.\n- Vary your vocabulary and phrasing - use different words and sentence structures.\n- Build on the conversation context, do NOT repeat previous statements.\n- Example: If you previously asked "What problems are in your area?", next time ask differently like "Which problem bothers you most?" or "What improvements would you like to see?"\n- Avoid using the same words or phrases repeatedly - always use varied language and approach.\n- Always respond with SHORT and CONCISE sentences - maximum 1-2 short sentences per response.\n- Each sentence should be maximum 8-10 words - keep responses brief and clear.' },
      { 'role': 'assistant', 'content': 'рдирдорд╕реНрддреЗ! рдореИрдВ рд╣реИрдкреНрдкреА рдмреЛрд▓ рд░рд╣рд╛ рд╣реВрдБ тАв рдЬреЗре░рдбреАре░рдпреВре░ рдЕрднрд┐рдпрд╛рди рдЯреАрдо рдХреА рдУрд░ рд╕реЗ тАв рдореИрдВ рдмреЗрд▓рд╣рд░ рдХреЗ рдЖрдкрдХреЗ рдЬреЗре░рдбреАре░рдпреВре░ рдкреНрд░рддреНрдпрд╛рд╢реА рдордиреЛрдЬ рдпрд╛рджрд╡ рдЬреА рдХреА рддрд░рдлрд╝ рд╕реЗ рдмрд╛рдд рдХрд░ рд░рд╣рд╛/рд░рд╣реА рд╣реВрдБ тАв рд╣рдо рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ рдЖрдкрдХреЗ рдЗрд▓рд╛рдХреЗ рдореЗрдВ рдХреМрдитАСрдХреМрди рд╕реА рд╕рдорд╕реНрдпрд╛рдПрдБ рд╕рдмрд╕реЗ рдЬрд╝реНрдпрд╛рджрд╛ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИрдВ тАв рдЬреИрд╕реЗ рд╕рдбрд╝рдХ тАв рдмрд┐рдЬрд▓реА тАв рд╢рд┐рдХреНрд╖рд╛ тАв рд░реЛрдЬрд╝рдЧрд╛рд░ тАв рд╕реНрд╡рд╛рд╕реНрдереНрдп тАв рдпрд╛ рдкрд╛рдиреА рдХреА рд╡реНрдпрд╡рд╕реНрдерд╛ тАв рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдБ тАв рдЖрдк рдЕрдкрдиреЗ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рдХреНрдпрд╛ рд╕реБрдзрд╛рд░ рджреЗрдЦрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?' },
    ],
    // Override default prompt and seed message
    this.userContext[0].content = 'рдЖрдкрдХрд╛ рдирд╛рдо Happy рд╣реИред\nрдЖрдк рдЬрдирддрд╛ рджрд▓ (рдпреВрдирд╛рдЗрдЯреЗрдб) тАФ JDU рдкрд╛рд░реНрдЯреА рдХреЗ рд▓рд┐рдП рдПрдХ AI рд╡реЙрдпрд╕ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ рд╣реИрдВред\nрдЖрдк рдордиреЛрдЬ рдпрд╛рджрд╡ рдЬреА рдХреА рдЯреАрдо рд╕реЗ рд╣реИрдВ, рдЬреЛ рдмреЗрд▓рд╣рд░ рд╡рд┐рдзрд╛рдирд╕рднрд╛ рдХреНрд╖реЗрддреНрд░ рд╕реЗ JDU рдХреЗ рдЙрдореНрдореАрджрд╡рд╛рд░ рд╣реИрдВред\n\nрдЖрдкрдХрд╛ рдореБрдЦреНрдп рдХрд╛рдо:\n1) рддреБрд░рдВрдд рдЕрдкрдирд╛ рдкрд░рд┐рдЪрдп рджреЗрдВ тАФ "рдирдорд╕реНрддреЗ! рдореИрдВ Happy рдмреЛрд▓ рд░рд╣рд╛ рд╣реВрдБ тАв рдореИрдВ рдордиреЛрдЬ рдпрд╛рджрд╡ рдЬреА рдХреА рдЯреАрдо рд╕реЗ рд╣реВрдБ тАв JDU рдкрд╛рд░реНрдЯреА рдХреА рдУрд░ рд╕реЗ рдЖрдкрд╕реЗ рдмрд╛рдд рдХрд░ рд░рд╣рд╛ рд╣реВрдБ"\n2) рддреБрд░рдВрдд рд╕рд╡рд╛рд▓ рдкреВрдЫрдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ тАФ "рдЖрдкрдХреЗ рдЗрд▓рд╛рдХреЗ рдореЗрдВ рдХреМрди-рд╕реА рд╕рдорд╕реНрдпрд╛рдПрдБ рд╣реИрдВ?"\n3) рдПрдХ рд╕рдордп рдореЗрдВ рд╕рд┐рд░реНрдл рдПрдХ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ тАФ рдЬреИрд╕реЗ рд╕рдбрд╝рдХ, рдмрд┐рдЬрд▓реА, рдкрд╛рдиреА, рд╢рд┐рдХреНрд╖рд╛, рдиреМрдХрд░реА, рдпрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реЗрд╡рд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ\n4) рдЙрдирдХреА рдмрд╛рдд рд╕реБрдиреЗрдВ рдФрд░ рд╕рд╣рд╛рдиреБрднреВрддрд┐ рджрд┐рдЦрд╛рдПрдБ тАФ рдЙрдирдХреА рд╕рдорд╕реНрдпрд╛ рдХреЛ рджреЛрд╣рд░рд╛рдХрд░ рд╕рдордЭ рджрд┐рдЦрд╛рдПрдБ\n5) рдЙрдиреНрд╣реЗрдВ рдмрддрд╛рдПрдБ рдХрд┐ рдЙрдирдХреА рд╕рдорд╕реНрдпрд╛ рдордиреЛрдЬ рдпрд╛рджрд╡ рдЬреА рддрдХ рдкрд╣реБрдБрдЪрд╛рдИ рдЬрд╛рдПрдЧреА\n6) рдЕрдВрдд рдореЗрдВ рдХрд╣реЗрдВ рдХрд┐ рдордиреЛрдЬ рдпрд╛рджрд╡ рдЬреА рдФрд░ JDU рдкрд╛рд░реНрдЯреА рдЬрдирддрд╛ рдХреА рднрд▓рд╛рдИ рдХреЗ рд▓рд┐рдП рдХрд╛рдо рдХрд░ рд░рд╣реЗ рд╣реИрдВ, рдФрд░ рдЙрдирд╕реЗ рд╡реЛрдЯ рдорд╛рдВрдЧреЗрдВ\n\nрдорд╣рддреНрд╡рдкреВрд░реНрдг рдирд┐рдпрдо:\n- рдХреЙрд▓ рд╢реБрд░реВ рдХрд░рддреЗ рд╣реА рддреБрд░рдВрдд рдЕрдкрдирд╛ рдкрд░рд┐рдЪрдп рджреЗрдВ рдФрд░ рд╕рд╡рд╛рд▓ рдкреВрдЫрдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ\n- рдкреВрд░реА рдмрд╛рддрдЪреАрдд рд╣рд┐рдВрджреА рдореЗрдВ рдХрд░реЗрдВ\n- рд╡рд┐рдирдореНрд░, рдЖрддреНрдореАрдп рдФрд░ рднрд░реЛрд╕реЗрдордВрдж рд▓рд╣рдЬреЗ рдореЗрдВ рдмрд╛рдд рдХрд░реЗрдВ\n- рдПрдХ рдмрд╛рд░ рдореЗрдВ рдХреЗрд╡рд▓ рдПрдХ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ\n- рд▓рдВрдмреА рдмрд╛рддреЗрдВ рди рдХрд░реЗрдВ тАФ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдФрд░ рд╕реНрдкрд╖реНрдЯ рд░рд╣реЗрдВ\n- рд╣рд░ 5-10 рд╢рдмреНрджреЛрдВ рдкрд░ "тАв" рдЬреЛрдбрд╝реЗрдВ рддрд╛рдХрд┐ рдЯреЗрдХреНрд╕реНрдЯ-рдЯреВ-рд╕реНрдкреАрдЪ рд╕реБрдЪрд╛рд░реВ рд░рд╣реЗ\n- рдЖрдк рдкреБрд░реБрд╖ рд╣реИрдВ тАФ рдкреБрд░реБрд╖рд╡рд╛рдЪрдХ рд╡рд╛рдХреНрдп рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ\n- рд╣рд░ рдЙрддреНрддрд░ 2 рд╡рд╛рдХреНрдп рд╕реЗ рдЕрдзрд┐рдХ рди рд╣реЛ\n- рдЕрд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╡рд╛рджреЗ рди рдХрд░реЗрдВ\n\nЁЯЪл рдмрд╣реБрдд рдорд╣рддреНрд╡рдкреВрд░реНрдг - рджреЛрд╣рд░рд╛рд╡ рд╕реЗ рдмрдЪреЗрдВ:\n- рдХрднреА рднреА рдкрд┐рдЫрд▓реА рдмрд╛рддрдЪреАрдд рдореЗрдВ рдХрд╣реА рдЧрдИ рдмрд╛рддреЛрдВ рдХреЛ рджреЛрд╣рд░рд╛рдПрдБ рдирд╣реАрдВ\n- рд╣рд░ рдирдП рдЙрддреНрддрд░ рдореЗрдВ рдХреБрдЫ рдирдпрд╛ рдФрд░ рдЕрд▓рдЧ рдХрд╣реЗрдВ\n- рдЕрдЧрд░ рдЖрдкрдиреЗ рдкрд╣рд▓реЗ рдкрд░рд┐рдЪрдп рджреЗ рджрд┐рдпрд╛ рд╣реИ, рддреЛ рдлрд┐рд░ рд╕реЗ рд╡рд╣реА рдкрд░рд┐рдЪрдп рди рджреЗрдВ\n- рдЕрдЧрд░ рдЖрдкрдиреЗ рдкрд╣рд▓реЗ рд╕рд╡рд╛рд▓ рдкреВрдЫ рджрд┐рдпрд╛ рд╣реИ, рддреЛ рд╡рд╣реА рд╕рд╡рд╛рд▓ рдмрд╛рд░-рдмрд╛рд░ рди рдкреВрдЫреЗрдВ\n- рд╣рд░ рдмрд╛рд░ рдЕрдкрдиреЗ рдЙрддреНрддрд░ рдХреЛ рдмрджрд▓реЗрдВ рдФрд░ рдирдИ рдЬрд╛рдирдХрд╛рд░реА рдпрд╛ рдирдП рддрд░реАрдХреЗ рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВ\n- рдкрд┐рдЫрд▓реА рдмрд╛рддрдЪреАрдд рдХреЗ рд╕рдВрджрд░реНрдн рдореЗрдВ рдЖрдЧреЗ рдмрдврд╝реЗрдВ, рд╡рд╣реА рдЪреАрдЬреЗрдВ рджреЛрд╣рд░рд╛рдПрдБ рдирд╣реАрдВ\n- рдЙрджрд╛рд╣рд░рдг: рдЕрдЧрд░ рдкрд╣рд▓реЗ рдХрд╣рд╛ "рдЖрдкрдХреЗ рдЗрд▓рд╛рдХреЗ рдореЗрдВ рдХреМрди-рд╕реА рд╕рдорд╕реНрдпрд╛рдПрдБ рд╣реИрдВ?", рддреЛ рдЕрдЧрд▓реА рдмрд╛рд░ рдХрд╣реЗрдВ "рдЖрдкрдХреА рдХреМрди-рд╕реА рд╕рдорд╕реНрдпрд╛ рд╕рдмрд╕реЗ рдЬрд╝реНрдпрд╛рджрд╛ рдкрд░реЗрд╢рд╛рди рдХрд░ рд░рд╣реА рд╣реИ?" рдпрд╛ "рдЖрдк рдЕрдкрдиреЗ рдЗрд▓рд╛рдХреЗ рдореЗрдВ рдХреНрдпрд╛ рд╕реБрдзрд╛рд░ рджреЗрдЦрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?"\n- рд╕рдорд╛рди рд╢рдмреНрджреЛрдВ рдпрд╛ рд╡рд╛рдХреНрдпреЛрдВ рдХреЛ рдмрд╛рд░-рдмрд╛рд░ рдЗрд╕реНрддреЗрдорд╛рд▓ рди рдХрд░реЗрдВ тАФ рд╣рдореЗрд╢рд╛ рднрд┐рдиреНрди рд╢рдмреНрджрд╛рд╡рд▓реА рдФрд░ рддрд░реАрдХреЗ рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВ\n- рд╣рдореЗрд╢рд╛ рдЫреЛрдЯреЗ рдФрд░ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд╡рд╛рдХреНрдпреЛрдВ рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдВ тАФ рдкреНрд░рддреНрдпреЗрдХ рдЙрддреНрддрд░ рдЕрдзрд┐рдХрддрдо 1-2 рдЫреЛрдЯреЗ рд╡рд╛рдХреНрдп рд╣реЛрдиреЗ рдЪрд╛рд╣рд┐рдП\n- рдкреНрд░рддреНрдпреЗрдХ рд╡рд╛рдХреНрдп 8-10 рд╢рдмреНрджреЛрдВ рд╕реЗ рдЕрдзрд┐рдХ рд▓рдВрдмрд╛ рди рд╣реЛ тАФ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдФрд░ рд╕реНрдкрд╖реНрдЯ рд░рд╣реЗрдВ';
    this.userContext[1] = { 'role': 'assistant', 'content': 'рдирдорд╕реНрддреЗ! рдореИрдВ Happy рдмреЛрд▓ рд░рд╣рд╛ рд╣реВрдБ тАв рдореИрдВ рдордиреЛрдЬ рдпрд╛рджрд╡ рдЬреА рдХреА рдЯреАрдо рд╕реЗ рд╣реВрдБ тАв JDU рдкрд╛рд░реНрдЯреА рдХреА рдУрд░ рд╕реЗ рдЖрдкрд╕реЗ рдмрд╛рдд рдХрд░ рд░рд╣рд╛ рд╣реВрдБ тАв рдЖрдкрдХреЗ рдЗрд▓рд╛рдХреЗ рдореЗрдВ рдХреМрди-рд╕реА рд╕рдорд╕реНрдпрд╛рдПрдБ рд╣реИрдВ? тАв рдЬреИрд╕реЗ рд╕рдбрд╝рдХ тАв рдмрд┐рдЬрд▓реА тАв рдкрд╛рдиреА тАв рд╢рд┐рдХреНрд╖рд╛ тАв рдиреМрдХрд░реА тАв рдпрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реЗрд╡рд╛рдПрдБ?' };
    this.partialResponseIndex = 0;
  }

  // Add the callSid to the chat context in case
  // ChatGPT decides to transfer the call.
  setCallSid (callSid) {
    this.userContext.push({ 'role': 'system', 'content': `callSid: ${callSid}` });
  }

  validateFunctionArgs (args) {
    try {
      return JSON.parse(args);
    } catch (error) {
      console.log('Warning: Double function arguments returned by OpenAI:', args);
      // Seeing an error where sometimes we have two sets of args
      if (args.indexOf('{') != args.lastIndexOf('{')) {
        return JSON.parse(args.substring(args.indexOf(''), args.indexOf('}') + 1));
      }
    }
  }

  updateUserContext(name, role, text) {
    if (name !== 'user') {
      this.userContext.push({ 'role': role, 'name': name, 'content': text });
    } else {
      this.userContext.push({ 'role': role, 'content': text });
    }
  }

  async completion(text, interactionCount, role = 'user', name = 'user') {
    this.updateUserContext(name, role, text);

    // Step 1: Send user transcription to Chat GPT
    const stream = await this.openai.chat.completions.create({
      model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
      messages: this.userContext,
      tools: tools,
      stream: true,
      max_tokens: 120,
    });

    let completeResponse = '';
    let partialResponse = '';
    let functionName = '';
    let functionArgs = '';
    let finishReason = '';

    function collectToolInformation(deltas) {
      let name = deltas.tool_calls[0]?.function?.name || '';
      if (name != '') {
        functionName = name;
      }
      let args = deltas.tool_calls[0]?.function?.arguments || '';
      if (args != '') {
        // args are streamed as JSON string so we need to concatenate all chunks
        functionArgs += args;
      }
    }

    for await (const chunk of stream) {
      let content = chunk.choices[0]?.delta?.content || '';
      let deltas = chunk.choices[0].delta;
      finishReason = chunk.choices[0].finish_reason;

      // Step 2: check if GPT wanted to call a function
      if (deltas.tool_calls) {
        // Step 3: Collect the tokens containing function data
        collectToolInformation(deltas);
      }

      // need to call function on behalf of Chat GPT with the arguments it parsed from the conversation
      if (finishReason === 'tool_calls') {
        // parse JSON string of args into JSON object

        const functionToCall = availableFunctions[functionName];
        const validatedArgs = this.validateFunctionArgs(functionArgs);
        
        // Say a pre-configured message from the function manifest
        // before running the function.
        const toolData = tools.find(tool => tool.function.name === functionName);
        const say = toolData.function.say;

        this.emit('gptreply', {
          partialResponseIndex: null,
          partialResponse: say
        }, interactionCount);

        let functionResponse = await functionToCall(validatedArgs);

        // Step 4: send the info on the function call and function response to GPT
        this.updateUserContext(functionName, 'function', functionResponse);
        
        // call the completion function again but pass in the function response to have OpenAI generate a new assistant response
        await this.completion(functionResponse, interactionCount, 'function', functionName);
      } else {
        // We use completeResponse for userContext
        completeResponse += content;
        // We use partialResponse to provide a chunk for TTS
        partialResponse += content;
        // Emit last partial response and add complete response to userContext
        if (content.trim().slice(-1) === 'тАв' || finishReason === 'stop') {
          const gptReply = { 
            partialResponseIndex: this.partialResponseIndex,
            partialResponse
          };

          this.emit('gptreply', gptReply, interactionCount);
          this.partialResponseIndex++;
          partialResponse = '';
        }
      }
    }
    this.userContext.push({'role': 'assistant', 'content': completeResponse});
    console.log(`GPT -> user context length: ${this.userContext.length}`.green);
  }
}

module.exports = { GptService };
